{"version":3,"file":"static/js/755.959067a1.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import React, {useState} from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDispatch } from \"react-redux\";\nimport { addContacts } from \"redux/contacts/operations\";\nimport { nanoid } from \"nanoid\";\nimport s from './ContactForm.module.css';\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n \n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const contacts = useSelector(state => state.contacts.contacts);\n  const dispatch = useDispatch();\n\n  const formSubmit  = ({name, number}) => {\n        const findName = contacts.find(contact => \n          contact.name.toLowerCase() === name.toLowerCase()\n        );\n        if (findName) {\n          return alert(`${name} is already in contacts.`);\n        };\n    \n        const findNumber = contacts.find(contact => \n          contact.phone === number\n        );\n        if (findNumber) {\n          return alert(`This phone number is already in use.`);\n        };\n    \n        dispatch(addContacts({name, number})); \n      }\n\n  const handleChange = e => {\n      const { name, value } = e.currentTarget;\n\n      switch (name) {\n        case 'name':\n          setName(value);\n          break;\n  \n        case 'number':\n          setNumber(value);\n          break;\n  \n        default:\n          break;\n      }\n  };\n\n  const handleSubmit = e => {\n      e.preventDefault();\n      formSubmit({ name: name, number: number });\n      reset();\n  };\n\n  const reset = () => {\n      setName('');\n      setNumber('');\n  };\n\n    return (\n      <form onSubmit={handleSubmit} className={s.form}>\n          <label htmlFor={nameInputId} className={s.label}>Name</label>\n          <input\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              value={name}\n              id = {nameInputId}\n              onChange={handleChange}\n              className={s.input}\n          />\n\n          <label htmlFor={numberInputId} className={s.label}>Number</label>\n          <input\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              value={number}\n              id = {numberInputId}\n              onChange={handleChange}\n              className={s.input}\n          />\n          <button type=\"submit\" className={s.button}>Add contact</button>\n     </form>\n    );\n}\n\n\n\n\n\n\n\n// import React, {useState} from \"react\";\n// import { useSelector } from \"react-redux\";\n// import { useDispatch } from \"react-redux\";\n// import { addContact } from \"redux/contactSlice\";\n// import { nanoid } from \"nanoid\";\n// import s from './ContactForm.module.css';\n\n// export function ContactForm() {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n \n//   const nameInputId = nanoid();\n//   const numberInputId = nanoid();\n\n//   const contacts = useSelector(state => state.contacts.contacts);\n//   const dispatch = useDispatch();\n\n//   const formSubmit  = ({name, number}) => {\n//         const findName = contacts.find(contact => \n//           contact.name.toLowerCase() === name.toLowerCase()\n//         );\n//         if (findName) {\n//           return alert(`${name} is already in contacts.`);\n//         };\n    \n//         const findNumber = contacts.find(contact => \n//           contact.number === number\n//         );\n//         if (findNumber) {\n//           return alert(`This phone number is already in use.`);\n//         };\n    \n//         dispatch(addContact({name, number})); \n//       }\n\n//   const handleChange = e => {\n//       const { name, value } = e.currentTarget;\n\n//       switch (name) {\n//         case 'name':\n//           setName(value);\n//           break;\n  \n//         case 'number':\n//           setNumber(value);\n//           break;\n  \n//         default:\n//           break;\n//       }\n//   };\n\n//   const handleSubmit = e => {\n//       e.preventDefault();\n//       formSubmit({ name: name, number: number });\n//       reset();\n//   };\n\n//   const reset = () => {\n//       setName('');\n//       setNumber('');\n//   };\n\n//     return (\n//       <form onSubmit={handleSubmit} className={s.form}>\n//           <label htmlFor={nameInputId} className={s.label}>Name</label>\n//           <input\n//               type=\"text\"\n//               name=\"name\"\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//               title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//               required\n//               value={name}\n//               id = {nameInputId}\n//               onChange={handleChange}\n//               className={s.input}\n//           />\n\n//           <label htmlFor={numberInputId} className={s.label}>Number</label>\n//           <input\n//               type=\"tel\"\n//               name=\"number\"\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//               title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//               required\n//               value={number}\n//               id = {numberInputId}\n//               onChange={handleChange}\n//               className={s.input}\n//           />\n//           <button type=\"submit\" className={s.button}>Add contact</button>\n//      </form>\n//     );\n// }\n\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import { useDispatch } from 'react-redux';\nimport { filterContact } from 'redux/contacts/slice';\nimport s from './Filter.module.css';\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const onChangeFilter = e => {\n        dispatch(filterContact(e.target.value));\n    }\n\n    return (\n        <div className={s.filter}>\n            <label className={s.label}>Find contacts by name\n            <input\n                    type=\"text\"\n                    name=\"filter\"\n                    onChange={onChangeFilter}\n                    className={s.input}\n            />\n            </label>\n        </div>\n    )\n} \n\n\n\n\n// import { useDispatch } from 'react-redux';\n// import { filterContact } from 'redux/contactSlice';\n// import s from './Filter.module.css';\n\n// const Filter = () => {\n//     const dispatch = useDispatch();\n//     const onChangeFilter = e => {\n//         dispatch(filterContact(e.target.value));\n//     }\n\n//     return (\n//         <div className={s.filter}>\n//             <label className={s.label}>Find contacts by name\n//             <input\n//                     type=\"text\"\n//                     name=\"filter\"\n//                     onChange={onChangeFilter}\n//                     className={s.input}\n//             />\n//             </label>\n//         </div>\n//     )\n// } \n\n// export default Filter;\n\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getContacts = state => state.contacts.contacts;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getFilteredContacts = createSelector(\n    getContacts,\n    getFilter,\n    (contacts, filter) => {\n        return contacts.filter(contact => {\n            return contact.name.toLowerCase().includes(filter.toLowerCase());\n        });\n    }\n);\n\nexport const selectLoading = state => state.contacts.loading;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactItem_contactItem__Z4FuP\",\"button\":\"ContactItem_button__IRFBz\"};","import { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"redux/contacts/operations\";\nimport s from './ContactItem.module.css';\n\nexport const ContactItem = ({ id, name, number }) => {\n    const dispatch = useDispatch();\n\n    return (\n\n            <li className={s.contactItem}>\n                {name}: {number}\n                <button type='button' className={s.button} onClick={() => dispatch(deleteContact(id))}>Delete</button>\n           </li>\n        )\n} \n\n\n\n\n\n// import PropTypes from 'prop-types';\n// import s from './ContactItem.module.css';\n// import { useDispatch } from \"react-redux\";\n// import { deleteContact } from \"redux/contactSlice\";\n\n// const ContactItem = ({ id, name, number }) => {\n//     const dispatch = useDispatch();\n\n//     return (\n\n//             <li className={s.contactItem}>\n//                 {name}: {number}\n//                 <button type='button' className={s.button} onClick={() => dispatch(deleteContact(id))}>Delete</button>\n//            </li>\n//         )\n// } \n\n// export default ContactItem;\n\n// ContactItem.propTypes = {\n//     id: PropTypes.string.isRequired,\n//     name: PropTypes.string.isRequired,\n//     number: PropTypes.string.isRequired,\n// };\n\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\"};","import { useSelector } from 'react-redux';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { getFilteredContacts } from 'redux/contacts/selectors';\nimport s from './ContactList.module.css'\n\nexport const ContactList = () => {\n    // const contacts = useSelector(state => state.contacts.contacts);\n    const contacts = useSelector(getFilteredContacts);\n\n    return (\n      <ul className={s.contactList}>\n           {contacts.map(({id, name, number}) => (\n                <ContactItem \n                    key={id} \n                    id={id}\n                    name={name}\n                    number={number}\n                />\n        ))}\n      </ul> \n    )\n} \n\n\n\n\n\n// import PropTypes from 'prop-types';\n// import { useSelector } from 'react-redux';\n// import { getFilteredContacts } from 'redux/selector';\n// import ContactItem from 'components/ContactItem/ContactItem';\n// import s from './ContactList.module.css'\n\n// const ContactList = () => {\n//     // const contacts = useSelector(state => state.contacts.contacts);\n//     const contacts = useSelector(getFilteredContacts);\n\n//     return (\n//       <ul className={s.contactList}>\n//            {contacts.map(({id, name, phone}) => (\n//                 <ContactItem \n//                     key={id} \n//                     id={id}\n//                     name={name}\n//                     number={phone}\n//                 />\n//         ))}\n//       </ul> \n//     )\n// } \n\n// export default ContactList;\n\n// ContactList.propTypes = {\n//     contacts: PropTypes.arrayOf(\n//         PropTypes.shape({\n//           id: PropTypes.string.isRequired,\n//           name: PropTypes.string.isRequired,\n//           number: PropTypes.string.isRequired,\n//         })\n//       ), \n// };\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { ContactList } from 'components/ContactList/ContactList';\n\n\n\nexport default function Contacts () {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n    return (\n      <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n       <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n      </>\n    );\n  };\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","name","setName","number","setNumber","nameInputId","numberInputId","contacts","useSelector","state","dispatch","useDispatch","handleChange","e","currentTarget","value","reset","onSubmit","preventDefault","find","contact","toLowerCase","alert","phone","addContacts","formSubmit","className","s","htmlFor","type","pattern","title","required","onChange","Filter","filterContact","target","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","getFilteredContacts","filter","includes","selectLoading","loading","ContactItem","onClick","deleteContact","ContactList","Contacts","isLoading","useEffect","fetchContacts"],"sourceRoot":""}